package com.hongyu.entity;
// Generated 2017-12-24 21:20:19 by Hibernate Tools 3.6.0.Final

import static com.hongyu.util.Constants.TREE_PATH_SEPARATOR;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreRemove;
import javax.persistence.PreUpdate;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.StringUtils;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.grain.entity.OrderEntity;

/**
 * HyDepartment generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "hy_department")
@SequenceGenerator(name = "sequenceGenerator", sequenceName = "hy_department_sequence")

public class Department extends OrderEntity {

	/** 父部门 */
	private Department hyDepartment;
	
	/** 部门模板 */
	private HyDepartmentModel hyDepartmentModel;
	
	/** 部门名称 */
	private String name;
	
	/** 部门状态 */
	private Integer status;
	
	/** 部门全称 */
	private String fullName;
	
	/** 树路径 */
	private String treePath;
	
	/** 是否是公司 */
	private Boolean isCompany;
	
	/** 对应公司 */
	private HyCompany hyCompany;
	
	/**对应门店*/
	private Store store;
	
	/*说明*/
	private String remark;
	
	/*创建人*/
	private HyAdmin creator;

	
	/** 权限集合 */
	private Set<HyRoleAuthority> hyRoleAuthority = new HashSet<HyRoleAuthority>(0);
	
	/** 子部门 */
	private Set<Department> hyDepartments = new HashSet<Department>(0);
	
	/** 部门员工 */
	private Set<HyAdmin> hyAdmins = new HashSet<HyAdmin>(0);
	
	/** 可见范围为部门的公告集合 */
	private Set<HyAnnouncement> hyDepartmentAnnouncement = new HashSet<HyAnnouncement>(0);
	
	/** 可见范围为公司的公告集合 */
	private Set<HyAnnouncement> HyCompanyAnnouncement = new HashSet<HyAnnouncement>(0);


	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent")
	public Department getHyDepartment() {
		return this.hyDepartment;
	}

	public void setHyDepartment(Department hyDepartment) {
		this.hyDepartment = hyDepartment;
	}

	@ManyToOne
	@JoinColumn(name = "model")
	public HyDepartmentModel getHyDepartmentModel() {
		return this.hyDepartmentModel;
	}

	public void setHyDepartmentModel(HyDepartmentModel hyDepartmentModel) {
		this.hyDepartmentModel = hyDepartmentModel;
	}


	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}
	@JsonProperty
	@Column(name = "full_name", nullable = false)
	public String getFullName() {
		return this.fullName;
	}

	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

	@Column(name = "tree_path", nullable = false)
	public String getTreePath() {
		return this.treePath;
	}

	public void setTreePath(String treePath) {
		this.treePath = treePath;
	}
	@Column(name="status")
	public Integer getStatus() {
		return status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "creator")
	public HyAdmin getCreator() {
		return creator;
	}

	public void setCreator(HyAdmin creator) {
		this.creator = creator;
	}

	@OneToOne(mappedBy = "hyDepartment")
	public HyCompany getHyCompany() {
		return hyCompany;
	}

	public void setHyCompany(HyCompany hyCompany) {
		this.hyCompany = hyCompany;
	}
	@OneToOne(mappedBy="department",cascade={CascadeType.PERSIST,CascadeType.MERGE})
	public Store getStore() {
		return store;
	}

	public void setStore(Store store) {
		this.store = store;
	}

	@OneToMany(mappedBy = "hyDepartment", fetch = FetchType.LAZY)
	public Set<Department> getHyDepartments() {
		return this.hyDepartments;
	}

	public void setHyDepartments(Set<Department> hyDepartments) {
		this.hyDepartments = hyDepartments;
	}
	
	@JsonProperty
	public Boolean getIsCompany() {
		return isCompany;
	}

	public void setIsCompany(Boolean isCompany) {
		this.isCompany = isCompany;
	}
	
	//本方作为多对多被控方
	@ManyToMany(fetch = FetchType.LAZY,
			mappedBy="departments")
	public Set<HyRoleAuthority> getHyRoleAuthority() {
		return hyRoleAuthority;
	}

	public void setHyRoleAuthority(Set<HyRoleAuthority> hyRoleAuthority) {
		this.hyRoleAuthority = hyRoleAuthority;
	}
	
	//本方作为多对多被控方
	@ManyToMany(fetch = FetchType.LAZY,
			mappedBy="departmentRange")
	public Set<HyAnnouncement> getHyDepartmentAnnouncement() {
		return hyDepartmentAnnouncement;
	}

	public void setHyDepartmentAnnouncement(Set<HyAnnouncement> hyDepartmentAnnouncement) {
		this.hyDepartmentAnnouncement = hyDepartmentAnnouncement;
	}

	//本方作为多对多被控方
	@ManyToMany(fetch = FetchType.LAZY,
			mappedBy="companyRange")
	public Set<HyAnnouncement> getHyCompanyAnnouncement() {
		return HyCompanyAnnouncement;
	}

	public void setHyCompanyAnnouncement(Set<HyAnnouncement> hyCompanyAnnouncement) {
		HyCompanyAnnouncement = hyCompanyAnnouncement;
	}

	@Column(name="remark")
	public String getRemark() {
		return remark;
	}

	public void setRemark(String remark) {
		this.remark = remark;
	}
	
	@Transient
	public List<Long> getTreePaths() {
		List<Long> treePaths = new ArrayList<Long>();
		String[] ids = StringUtils.split(getTreePath(), TREE_PATH_SEPARATOR);
		if (ids != null) {
			for (String id : ids) {
				treePaths.add(Long.valueOf(id));
			}
			treePaths.add(this.getId());
		}
		return treePaths;
	}

	/**
	 * 持久化前处理
	 */
	@PrePersist
	public void prePersist() {
		Department parent = getHyDepartment();
		if (parent != null && parent.getHyDepartmentModel().getName() =="总公司" && parent.getIsCompany()) {
			setFullName(getName());
			setTreePath(parent.getTreePath() + parent.getId() + TREE_PATH_SEPARATOR);
		} else {
			setFullName(parent.getFullName() + getName());
			setTreePath(parent.getTreePath() + parent.getId() + TREE_PATH_SEPARATOR);
		}
		this.setStatus(1);
	}

	/**
	 * 更新前处理
	 */
	@PreUpdate
	public void preUpdate() {
		Department parent = getHyDepartment();
		if (parent != null && parent.getHyDepartmentModel().getName() =="总公司" && parent.getIsCompany()) {
			setFullName(getName());
			setTreePath(parent.getTreePath() + parent.getId() + TREE_PATH_SEPARATOR);
		} else {
			setFullName(parent.getFullName() + getName());
			setTreePath(parent.getTreePath() + parent.getId() + TREE_PATH_SEPARATOR);
		}
	}

	/**
	 * 删除前处理
	 */
	@PreRemove
	public void preRemove() {
		
	}
	@OneToMany(mappedBy="department",fetch=FetchType.LAZY)
	public Set<HyAdmin> getHyAdmins() {
		return hyAdmins;
	}

	public void setHyAdmins(Set<HyAdmin> hyAdmins) {
		this.hyAdmins = hyAdmins;
	}

}
