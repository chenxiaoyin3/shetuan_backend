package com.hongyu.entity;
// Generated 2017-12-12 17:05:00 by Hibernate Tools 3.6.0.Final

import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * HyInsurance generated by hbm2java
 */
@Entity
@Table(name = "hy_insurance")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler",
	})
public class Insurance implements java.io.Serializable {

	private Long id;
	private Date createDate;
	private Date modifyDate;
	private Integer classify;//0国内，1出境
	private String insuranceCode;
	private String remark;
	//保额
	private List<InsuranceAttach> insuranceAttachs;
	//不同天数的保险金额
	private List<InsurancePrice> insurancePrices;
	//不同年龄的倍数
	private List<InsuranceTime> insuranceTimes;
	private HyAdmin operator;
	public Insurance() {
	}

	public Insurance(Long id) {
		this.id = id;
	}
	public Insurance(Long id, Date createDate, Date modifyDate,
			Integer classify, String insuranceCode, String remark) {
		this.id = id;
		this.createDate = createDate;
		this.modifyDate = modifyDate;
		this.classify = classify;
		this.insuranceCode = insuranceCode;
		this.remark = remark;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_date", length = 19)
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modify_date", length = 19)
	public Date getModifyDate() {
		return this.modifyDate;
	}

	public void setModifyDate(Date modifyDate) {
		this.modifyDate = modifyDate;
	}

	@Column(name = "classify")
	public Integer getClassify() {
		return this.classify;
	}

	public void setClassify(Integer classify) {
		this.classify = classify;
	}

	@Column(name = "insurance_code")
	public String getInsuranceCode() {
		return this.insuranceCode;
	}

	public void setInsuranceCode(String insuranceCode) {
		this.insuranceCode = insuranceCode;
	}

	@Column(name = "remark")
	public String getRemark() {
		return this.remark;
	}

	public void setRemark(String remark) {
		this.remark = remark;
	}

	@OneToMany(fetch=FetchType.LAZY,mappedBy="insurance", cascade = CascadeType.ALL, orphanRemoval = true)
	public List<InsuranceAttach> getInsuranceAttachs() {
		return insuranceAttachs;
	}

	public void setInsuranceAttachs(List<InsuranceAttach> insuranceAttachs) {
		this.insuranceAttachs = insuranceAttachs;
	}

	@OneToMany(fetch=FetchType.LAZY,mappedBy="insurance", cascade = CascadeType.ALL, orphanRemoval = true)
	public List<InsurancePrice> getInsurancePrices() {
		return insurancePrices;
	}

	public void setInsurancePrices(List<InsurancePrice> insurancePrices) {
		this.insurancePrices = insurancePrices;
	}

	@OneToMany(fetch=FetchType.LAZY,mappedBy="insurance", cascade = CascadeType.ALL, orphanRemoval = true)
	public List<InsuranceTime> getInsuranceTimes() {
		return insuranceTimes;
	}

	public void setInsuranceTimes(List<InsuranceTime> insuranceTimes) {
		this.insuranceTimes = insuranceTimes;
	}
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="operator")
	public HyAdmin getOperator() {
		return operator;
	}

	public void setOperator(HyAdmin operator) {
		this.operator = operator;
	}

	@PrePersist
	public void prePersist(){
		this.setCreateDate(new Date());
	}
	@PreUpdate
	public void preUpdate(){
		this.setModifyDate(new Date());
	}
}
